buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["NtlPdpaConsent_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

// Implement start
def appProject
if (findProject(':@react-native-firebase_app')) {
  appProject = project(':@react-native-firebase_app')
} else if (findProject(':react-native-firebase_app')) {
  appProject = project(':react-native-firebase_app')
} else {
  throw new GradleException('Could not find the react-native-firebase/app package, have you installed it?')
}
def packageJson = PackageJson.getForProject(project)
def appPackageJson = PackageJson.getForProject(appProject)
def firebaseBomVersion = appPackageJson['sdkVersions']['android']['firebase']
def jsonMinSdk = appPackageJson['sdkVersions']['android']['minSdk']
def jsonTargetSdk = appPackageJson['sdkVersions']['android']['targetSdk']
def jsonCompileSdk = appPackageJson['sdkVersions']['android']['compileSdk']
def jsonBuildTools = appPackageJson['sdkVersions']['android']['buildTools']
def coreVersionDetected = appPackageJson['version']
def coreVersionRequired = packageJson['peerDependencies'][appPackageJson['name']]
// Only log after build completed so log warning appears at the end
if (coreVersionDetected != coreVersionRequired) {
  gradle.buildFinished {
    project.logger.warn("ReactNativeFirebase WARNING: NPM package '${packageJson['name']}' depends on '${appPackageJson['name']}' v${coreVersionRequired} but found v${coreVersionDetected}, this might cause build issues or runtime crashes.")
  }
}

project.ext {
  set('react-native', [
    versions: [
      android : [
        minSdk    : jsonMinSdk,
        targetSdk : jsonTargetSdk,
        compileSdk: jsonCompileSdk,
        // optional as gradle.buildTools comes with one by default
        // overriding here though to match the version RN uses
        buildTools: jsonBuildTools
      ],

      firebase: [
        bom: firebaseBomVersion,
      ],
    ],
  ])
}

apply from: file('./../../app/android/firebase-json.gradle')

String collectionDeactivated = 'false'
String adidEnabled = 'true'
String ssaidEnabled = 'true'
String personalizationEnabled = 'true'

// If nothing is defined, data collection defaults to true
String dataCollectionEnabled = 'true'

if (rootProject.ext && rootProject.ext.firebaseJson) {
  /* groovylint-disable-next-line NoDef, VariableTypeRequired */
  def rnfbConfig = rootProject.ext.firebaseJson
  // If the SDK-wide data collection flag is defined and false, our default flips to false
  if (rnfbConfig.isFlagEnabled('app_data_collection_default_enabled', true) == false) {
    dataCollectionEnabled = 'false'
  }
  // If our specific collection flag is defined, it's status takes precedence
  if (rnfbConfig.isDefined('analytics_auto_collection_enabled')) {
    if (rnfbConfig.isFlagEnabled('analytics_auto_collection_enabled', true)) {
      dataCollectionEnabled = 'true'
    } else {
      dataCollectionEnabled = 'false'
    }
  }

  if (rnfbConfig.isFlagEnabled('analytics_collection_deactivated', false) == true) {
    collectionDeactivated = 'true'
  }
  if (rnfbConfig.isFlagEnabled('google_analytics_adid_collection_enabled', true) == false) {
    adidEnabled = 'false'
  }
  if (rnfbConfig.isFlagEnabled('google_analytics_ssaid_collection_enabled', true) == false) {
    ssaidEnabled = 'false'
  }
  if (rnfbConfig.isFlagEnabled('analytics_default_allow_ad_personalization_signals', true) == false) {
    personalizationEnabled = 'false'
  }

// Implement end

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["NtlPdpaConsent_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["NtlPdpaConsent_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  if (supportsNamespace()) {
    namespace "com.reactnativefirebase.ntlpdpaconsent"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    defaultConfig {
    multiDexEnabled true
    manifestPlaceholders = [
      firebaseJsonAutoCollectionEnabled: dataCollectionEnabled,
      firebaseJsonCollectionDeactivated: collectionDeactivated,
      firebaseJsonAdidEnabled: adidEnabled,
      firebaseJsonSsaidEnabled: ssaidEnabled,
      firebaseJsonPersonalizationEnabled: personalizationEnabled
    ]
  }

  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
        java.srcDirs += [
          "src/newarch",
          // This is needed to build Kotlin project with NewArch enabled
          "${project.buildDir}/generated/source/codegen/java"
        ]
      } else {
        java.srcDirs += ["src/oldarch"]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation platform("com.google.firebase:firebase-bom:${ReactNative.ext.getVersion("firebase", "bom")}")
  implementation "com.google.firebase:firebase-analytics"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "NtlPdpaConsent"
    codegenJavaPackageName = "com.reactnativefirebase.ntlpdpaconsent"
  }
}
